
@Slf4j
@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.DEFINED_PORT)
@TestPropertySource(properties = "server.port=8786")
@ActiveProfiles("junit")
public abstract class ApplicationTest {

}

public class WebsocketClient {

    private static final String URL = "ws://localhost:8786/server/push";
    private static final CountDownLatch latch = new CountDownLatch(1);
    private static String request;
    private static String actualResponse;

    @ClientEndpoint
    public static class WebSocketClientEndpoint {

        @OnOpen
        public void onOpen(Session session) {
            System.out.println("WebSocket connected!");
            session.getAsyncRemote().sendText(WebsocketClient.request);
        }

        @OnMessage
        public void onMessage(String message) {
            System.out.println("Received response: " + message);
            actualResponse = message;
            latch.countDown();
        }

        @OnClose
        public void onClose(Session session, CloseReason closeReason) {
            System.out.println("WebSocket closed: " + closeReason.getCloseCode());
        }

        @OnError
        public void onError(Session session, Throwable throwable) {
            throwable.printStackTrace();
        }
    }

    public void assertWebsocket(String request, String expectedResponse) throws Exception {
        WebsocketClient.request = request;
        var container = ContainerProvider.getWebSocketContainer();

        try (var session = container.connectToServer(WebSocketClientEndpoint.class, new URI(URL))) {
            boolean responseReceived = latch.await(3, TimeUnit.SECONDS);
            assertTrue(responseReceived, "WebSocket response not received in time");
            assertEquals(actualResponse, expectedResponse);
        }
    }

}


public class DictionaryVitalTest extends ApplicationTest {

    @Test
    void testWebSocket() throws Exception {
        String request = "{\"requestNum\":54, \"execute\":false}";
        String response = "Hello world!";
        new WebsocketClient().assertWebsocket(request, response);
    }


}

