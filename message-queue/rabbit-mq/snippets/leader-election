Not really an election - more like a takeover



/**
 * Only 1 replica should process rabbit messages, all others have enable = false
 */
 @Slf4j
@Service
@Transactional
@RequiredArgsConstructor
public class RabbitListenerService {

    private final RabbitListenerEndpointRegistry rabbitListenerEndpointRegistry;
    private final SystemPropertyRepository systemPropertyRepository;
    private String propertyName = "RABBIT_LISTENER_REPLICA";
    private String currentReplicaId = UUID.randomUUID().toString();
    private boolean shouldBeListening = false;

    @Scheduled(fixedDelay = 5 * 1000)
    public void tryToTakeOver() {
        if (isListener()) {
            notifyOthers();
        } else if (isTimeToTakeOver()) {
            takeOver();
        }

        if (shouldBeListening && !isListener()) {
            log.error("This replica should be listening, but something went wrong. replicaId - " + currentReplicaId);
            System.exit(1);
        }
    }

    /** Is this replica the one who processes incoming Rabbit messages? */
    public boolean isListener() {
        var listenerReplicaId = systemPropertyRepository.findByName(propertyName).getValue();
        return Objects.equals(currentReplicaId, listenerReplicaId);
    }

    /** This replica starts listening, all others chill */
    protected void takeOver() {
        notifyOthers();
        rabbitListenerEndpointRegistry.getListenerContainers().forEach(Lifecycle::start);
        shouldBeListening = true;
        log.info("Replica starts listening - " + currentReplicaId);
    }

    /** Send notification - "This replica is listening, all others should chill" */
    protected void notifyOthers() {
        var property = systemPropertyRepository.findByName(propertyName);
        property.setUpdateTime(getDatabaseTime());
        property.setValue(currentReplicaId);
        systemPropertyRepository.saveAndFlush(property);
    }

    /**
     * True if no other replica is doing processing right now
     */
    protected boolean isTimeToTakeOver() {
        var updateTime = systemPropertyRepository.findByName(propertyName).getUpdateTime();
        if (updateTime == null) {
            return true; // DB is empty, only possible at first run
        }
        var updateDeadline = getDatabaseTime().minusSeconds(16);
        return updateTime.isBefore(updateDeadline);
    }

    /**
     * It's very important to get current time from DB:
     * @Query(value = "SELECT NOW()", nativeQuery = true) Timestamp getDatabaseTime();
     * Because different replicas can have different time (depends on server/node)
     */
    protected OffsetDateTime getDatabaseTime() {
        var nowLocal = systemPropertyRepository.getDatabaseTime().toLocalDateTime();
        return DateTimeUtils.toOffsetDateTime(nowLocal);
    }

}