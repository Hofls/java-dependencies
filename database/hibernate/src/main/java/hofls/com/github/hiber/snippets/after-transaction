// Send message to redis, after successful transaction/commit that changed status
// Use @Transaction and call repository.save(entity), .save() is necessary because of AbstractAggregateRoot quirks
// Alternative to AbstractAggregateRoot (no need to call .save() each time):
  // ApplicationEventPublisher eventPublisher;
  // eventPublisher.publishEvent(customEvent);


@Entity
@Table(name = "sick_card")
public class SickCard extends AbstractAggregateRoot<SickCard>  {

    public void changeStatus(SickStatus newStatus) {
        if (this.status != newStatus) {
            this.status = newStatus;
            registerEvent(new SickChangeStatusEvent(id, newStatus));
        }
    }

}

@Component
public class SickEventListener {

    private final RedisPublisher redisPublisher;

    @TransactionalEventListener(phase = TransactionPhase.AFTER_COMMIT) // If you use AbstractAggregateRoot, you must call repository.save(entity)
    public void changeStatusSick(SickChangeStatusEvent event) {
        redisPublisher.publishMessage(
                new RefresherMessage(RefresherType.SICK, event.getId(), event.getStatus().name()));
    }
}

public class SickChangeStatusEvent {
    private UUID id;
    private SickStatus status;
}


//
// TESTS:
Create facade for class SickEventListener, replace AFTER_COMMIT with AFTER_ROLLBACK
In the test, force end transaction using TestTransaction.end();
Now event will trigger, code will be executed
