// Send message to redis, but only after successful transaction/commit

@Component
public class RefresherPublisher {

    @Value("${redis.channel.refresher}")
    private String channel;

    @Autowired
    private StringRedisTemplate redisTemplate;

    @Deprecated // Bad method, sends notification about changes, even if transaction is slow or was rolled back
    public void publishMessage(RefresherMessage message) {
        redisTemplate.convertAndSend(channel, message.toJson());
    }

    // Good method, sends notification only if transaction is successful (calls method afterCommit())
    public void publishAfterTransaction(RefresherMessage message) {
        DomainEventPublisher.publish(new RedisEvent(message));
    }

    @TransactionalEventListener(phase = TransactionPhase.AFTER_COMMIT)
    public void afterCommit(RedisEvent event) {
        redisTemplate.convertAndSend(channel, event.getRefresherMessage().toJson());
    }

}

@Data
@AllArgsConstructor
public class RedisEvent {
    private RefresherMessage refresherMessage; // RefresherMessage is a custom class with custom fields
}
