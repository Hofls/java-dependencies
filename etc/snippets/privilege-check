// Modern way - ENUM ----------------------------------------------------------------------------------------
// SQL - SELECT * FROM users WHERE privileges @> '["WRITE", "READ"]'

public enum UserPrivilege {
    READ,
    WRITE,
    EXECUTE,
    DELETE
}

public class PrivilegeChecker {
    public static boolean hasPrivilege(List<UserPrivilege> userPrivileges, int privilege) {
        return userPrivileges.contains(privilege);
    }
}

public static void main(String[] args) {
    var userPrivileges = List.of(Privileges.READ, Privileges.WRITE);
    boolean canRead = PrivilegeChecker.hasPrivilege(userPrivileges, Privileges.READ); // true
    boolean canWrite = PrivilegeChecker.hasPrivilege(userPrivileges, Privileges.WRITE); // true
    boolean canExecute = PrivilegeChecker.hasPrivilege(userPrivileges, Privileges.EXECUTE); // false
}




// Very outdated way - BITWISE ------------------------------------------------------------------------------
// SQL - SELECT * FROM users WHERE (privileges & (1 | 2)) = (1 | 2);

public class Privileges {
    public static final int READ = 1 << 0;   // 1
    public static final int WRITE = 1 << 1;  // 2
    public static final int EXECUTE = 1 << 2; // 4
    public static final int DELETE = 1 << 3;  // 8
}

public class PrivilegeChecker {
    public static boolean hasPrivilege(int userPrivileges, int privilege) {
        return (userPrivileges & privilege) == privilege;
    }
}

public static void main(String[] args) {
    int userPrivileges = Privileges.READ | Privileges.WRITE;
    boolean canRead = PrivilegeChecker.hasPrivilege(userPrivileges, Privileges.READ); // true
    boolean canWrite = PrivilegeChecker.hasPrivilege(userPrivileges, Privileges.WRITE); // true
    boolean canExecute = PrivilegeChecker.hasPrivilege(userPrivileges, Privileges.EXECUTE); // false
}


